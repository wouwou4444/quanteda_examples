library("Lahman")
library("nycflights13")
config <- spark_config()
config[["sparklyr.defaultPackages"]] <- NULL
sc <- spark_connect(master = "local", config = config)
spark_disconnect(sc)
sc <- spark_connect(master = "local", config = config)
spark_install(version = "2.0.1")
library(sparklyr)
library(dplyr)
library(DBI)
Sys.getenv("PATH")
Sys.setenv(SPARK_HOME="C:\\Users\\valer\\AppData\\Local\\rstudio\\spark\\Cache\\spark-2.0.1-bin-hadoop2.7")
Sys.setenv(HADOOP_HOME="C:\\Users\\valer\\AppData\\Local\\rstudio\\spark\\Cache\\spark-2.0.1-bin-hadoop2.7\\tmp\\hadoop")
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_92")
Sys.setenv(SPARK_LOCAL_IP="127.0.0.1")
library("nycflights13")
library("Lahman")
sc <- spark_connect(master = "local")
spark_disconnect(sc)
sc <- spark_connect(master = "local", config = config)
config <- spark_config()
config[["sparklyr.defaultPackages"]] <- NULL
sc <- spark_connect(master = "local", config = config)
copy_to(sc, iris)
iris_tbl <- copy_to(sc, iris)
iris_tbl <- copy_to(sc, iris,overwrite = TRUE)
table(iris)
describe
describe
describe()
desc(iris)
summary(iris)
str(iris)
str(iris_tbl)
flights_tbl <- copy_to(sc, nycflights13::flights, "flights")
spark_log(10)
spark_log(n = 10)
spark_log(sc,n = 10)
spark_log(sc,n = 100)
batting_tbl <- copy_to(sc, Lahman::Batting, "batting")
spark_dependency(
jars = c(
system.file(
"D:\\OneDrive\\Documents\\Spark\\spark-avro_2.11-3.2.0.jar",
package = "spark-avro"
)
)
)
help("spark_dependency")
spark_write_csv(iris_tbl,"iris.csv")
spark_write_csv(iris_tbl,"iris2.csv")
spark_write_json(iris_tbl,"iris2.jsn")
spark_connection(iris)
spark_connection(nouveau)
devtools::install_github("rstudio/sparklyr")
library(sparklyr)
version()
R.version
list.files()
list.files(pattern = ".exe")
list.files(pattern = ".csv")
data_files <- list.files(pattern = ".csv")
print(data_files)
library("readr")
library("tibble")
read_list()
library("SparkR")
library("SparkR",lib.loc="e:\spark")
library(data.table)
library(plotly)
library(lubridate)
packageVersion("plotly")
n <- 10000
inc_tab <- data.frame(date=as.Date(paste("2017-10-",sample(1:31,n,replace=TRUE),sep="")),
number=paste("INC", formatC(sample(1:50000,n),width = 6, flag="0"),sep = ""),
assignment_group = sample(c("dba","system","storage","cloud","monitoring"), n, replace = TRUE),
assigned_to = sample(c("Amelie","Bruno","Chris","Dan","Elya","Fred"),n, replace = TRUE),
priority = sample(c("P1", "P2", "P3", "P4"), n,replace = TRUE),
cmdb_ci = sample(c("CLOUD", "CAR", "AVENGERS", "JUSTICE", "DRAGON"),n,replace = TRUE))
inc_tab <- data.table(inc_tab, key= "number")
key(inc_tab)
table(inc_tab$date, inc_tab$assignment_group)
agg_date_group <- as.data.frame(table(inc_tab$date, inc_tab$assignment_group))
agg_date_group
colnames(agg_date_group) <- c("date", "assignment_group", "count")
agg_date_group %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
add_bars() %>%
layout(barmode = "stack")
agg_date_group %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
add_pie() %>%
layout(barmode = "stack")
agg_date_group %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
add_pie(1) %>%
layout(barmode = "stack")
agg_date_group %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
add_pie(0.2) %>%
layout(barmode = "stack")
hole=0.5
agg_date_group %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
add_pie(hole = 0.5) %>%
layout(barmode = "stack")
agg_date_group %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
add_histogram() %>%
layout(barmode = "stack")
agg_date_group %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
add_lines() %>%
layout(barmode = "stack")
agg_date_group %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
add_markers() %>%
layout(barmode = "stack")
agg_date_group %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
add_bars() %>%
layout(barmode = "stack")
agg_date_group <- as.data.frame(table(inc_tab$date, inc_tab$assignment_group,inc_tab$assigned_to))
colnames(agg_date_group) <- c("date", "assignment_group", "assignee_to", "count")
library(plotly)
library(dplyr)
agg_date_group %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
add_bars() %>%
layout(barmode = "stack")
agg_date_group %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
summarize(count = n()) %>%
add_bars() %>%
layout(barmode = "stack")
agg_date_group %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
# summarize(count = n()) %>%
add_bars() %>%
layout(barmode = "stack")
agg_date_group %>%
group_by(assignment_group) %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
# summarize(count = n()) %>%
add_bars() %>%
layout(barmode = "stack")
agg_date_group %>%
group_by(assignee_to) %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group) %>%
# summarize(count = n()) %>%
add_bars() %>%
layout(barmode = "stack")
agg_date_group %>%
group_by(assignee_to) %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group, type = assignee_to) %>%
# summarize(count = n()) %>%
add_bars() %>%
layout(barmode = "stack")
agg_date_group %>%
group_by(assignee_to) %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group, type = ~assignee_to) %>%
# summarize(count = n()) %>%
add_bars() %>%
layout(barmode = "stack")
agg_date_group %>%
group_by(assignee_to) %>%
plot_ly(x = ~date, y = ~count, color = ~assignment_group, type = ~assignee_to) %>%
# summarize(count = n()) %>%
add_bars() %>%
layout(barmode = "stack")
install.packages("shiny")
install.packages("KernSmooth")
load(KernSmooth)
library(KernSmooth)
### Data Science Specialization
* Uses R
* Nine courses
* Goes from raw data to data products
library(devtools)
install.packages("devtools")
R.version
install.packages("devtools")
library(devtools)
find.package("devtools")
test <- available.packages()
head(test)
test <- available.packages()
find_rtools()
library(devtools)
find_rtools()
swirl()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7),]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar,norf=NA)
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2)
names(vect2) <- c("foo","bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(vector)
dim(my_vector)
row.names(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix2)
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
names(my_data) <- cnames
colnames(my_data) <- cnames
my_data
ls()
vect
mean(vect)
means(vect)
numeric(4)
invteger(4)
integer(4)
vector(4)
vector()
vector(2)
vector(1)
vector(0)
vector()
logical(5)
logical(10)
matrix(nrow = 2, ncol = 3)
data.frame(nrow = 2, ncol = 3)
data.frame(nrow = 2; ncol = 3)
data.frame(nrow = 1:3, ncol = 2:4)
row.names(data.frame(nrow = 1:3, ncol = 2:4))
vect
mean(vect)
mean(vect, na.rm = T)
vect
above <- function(x,n) {
use <- x > n
x[use]
}
above
ls()
y
x
vect
above(vect,5)
search()
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor()
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 5)
which(ints > 7)
any( ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5 )
remainder(4, div = 2)
args(remainder)
submit()
evaluate()
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x) {x[1]},c(8, 4, 0))
evaluate(function(x) {x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("echo echo1 echo2")
submit()
mad_libs(place = "test", adjective = "pretty", noun = "city")
submit()
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2*min
t2$min
weekdays(d1)
weekdays(t1)
months(t1)
quaters(t2)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
pollutantmean <- function (directory, pollutant, id = 1:332) {
read.csv( file = paste(directory, id))
}
pollutantmean("d:/machine-learning/Johns_Hopkins/course2/specdata/")
pollutantmean("d:/machine-learning/Johns_Hopkins/course2/specdata/",id = 1)
id <- 1
id
as.character(id)
print(id)
?as.character
print(id, digits = 3)
format(id, digits = 3)
format(id, digits = 4)
as.character(id, digits = 4)
character(id, )
character(id )
character( )
character( "a")
character( 2)
as.numeric(id)
swirl()
5+7
x <- 5+7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
formatC(x, width = 8, format = "d", flag = "0")
x
formatC(id, width = 8, format = "d", flag = "0")
format(id, width = 8, format = "d", flag = "0")
format(id, width = 8, format = "i", flag = "0")
format(id, width = 8, flag = "0")
exit()
exit
0
quit
quit()
R.Version()
install.packages(c("ggplot2", "e1071", "caret", "quanteda", "irlba", "randomForest"))
getwd()
dir("./")
dir("../")
dir("~/")
dir("~/..")
file("~/..")
dir("~/../OneDrive")
dir("~/../OneDrive/Documents/")
dir("~/../OneDrive/Documents/coursera/")
setwd(dir = "~/../OneDrive/Coursera2/R/")
dir("~/../")
# install.packages(c("ggplot2", "e1071", "caret", "quanteda", "irlba", "randomForest"))
setwd("d:/valbuz/OneDrive/Coursera2/")
# install.packages(c("ggplot2", "e1071", "caret", "quanteda", "irlba", "randomForest"))
setwd("d:/valbuz/OneDrive/Coursera2/R/quanteda_examples")
spam.raw <- read.csv("spam.csv", stringsAsFactors = FALSE)
spam.raw <- spam.raw[, 1:2]
names(spam.raw) <- c("label", "text")
head(spam.raw)
length(which(!complete.cases(spam.raw)))
spam.raw$label <- as.factor(spam.raw$label)
base::table(spam.raw$label)
prop.table(base::table(spam.raw$label))
spam.raw$textLength <- nchar(spam.raw$text)
head(spam.raw)
summary(spam.raw$textLength)
View(spam.raw)
library(caret)
library(caret)
set.seed(32984)
indexes <- createDataPartition(spam.raw$label, times = 1,
p = 0.7, list = FALSE)
train <- spam.raw[indexes,]
test <- spam.raw[-indexes,]
table(train$label)
prop.table(table(train$label))
table(test$label)
prop.table(table(test$label))
train.tokens <- tokens(train$text, what = "word",
remove_numbers = TRUE, remove_punct = TRUE,
remove_symbols = TRUE, remove_hyphens = TRUE)
library(quanteda)
train.tokens <- tokens(train$text, what = "word",
remove_numbers = TRUE, remove_punct = TRUE,
remove_symbols = TRUE, remove_hyphens = TRUE)
train$text[357]
train.tokens[[357]]
train.tokens <-  tokens_tolower(train.tokens)
train.tokens <- tokens_select(train.tokens, stopwords(language = "english"),
selection = "remove")
train.tokens[[357]]
train.tokens <- tokens_wordstem(train.tokens, language = "english")
train.tokens[[357]]
train.tokens.dfm <- dfm(train.tokens, tolower = FALSE)
train.tokens.matrix <- as.matrix(train.tokens.dfm)
View(train.tokens.matrix[1:6])
View(train.tokens.matrix[1:6,])
dim(train.tokens.matrix)
colnames(train.tokens.matrix)[1:50]
class(train.tokens.dfm)
set.seed(48743)
?createMultiFolds
cv.folds <- createMultiFolds(train$label, k = 10, times = 3)
cv.folds
install.packages("doSNOW")
start.time <- Sys.time()
# install.packages("doSNOW")
library(doSNOW)
cl <- makeCluster(4, type = "SOCK")
dim(train.tokens.matrix)
colnames(train.tokens.matrix)[1:50]
colnames(train.tokens.matrix)[1:50
0]
colnames(train.tokens.matrix)[1:500]
train.tokens.df <- cbind( label = train$label, as.data.frame(train.tokens.dfm))
train.tokens.df <- cbind( label = train$label, convert(train.tokens.dfm, to = "data.frame"))
dim(train.tokens.df)
names(train.tokens.df)[c(146, 148, 235, 238)]
dim(convert(train.tokens.dfm, to = "data.frame"))
names(train.tokens.df) <- make.names(names(train.tokens.df))
names(train.tokens.df) <- make.names(names(train.tokens.df))
names(train.tokens.df)[c(146, 148, 235, 238)]
set.seed(48743)
cv.folds <- createMultiFolds(train$label, k=10, times = 3)
cv.folds
length(cv.folds$Fold01.Rep1)
length(cv.folds$Fold01.Rep2)
length(cv.folds$Fold01.Rep3)
dim(train)
length(cv.folds$Fold05.Rep3)
length(cv.folds$Fold05.Rep2)
prop.table(table(train$label[cv.folds$Fold05.Rep2]))
3511/3901
start.time <- Sys.time()
?train
cv.cntrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3, index = cv.folds)
head(cv.cntrl)
str(cv.cntrl)
# install.packages("doSNOW")
library(doSNOW)
start.time <- Sys.time()
cl <- makeCluster(2, type = "SOCK")
